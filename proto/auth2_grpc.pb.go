// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Auth2Client is the client API for Auth2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Auth2Client interface {
	Stats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	Restart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SystemSupportNotify(ctx context.Context, in *SystemSupportNotifyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetUserSessions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error)
	SaveUserSession(ctx context.Context, in *UserSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteUserSession(ctx context.Context, in *UserSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteUsers(ctx context.Context, in *UserIdsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CreateUser(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*User, error)
	CheckUserPassword(ctx context.Context, in *UserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SetUserPassword(ctx context.Context, in *UserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ConfirmUser(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*User, error)
	RequestUserPassword(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*User, error)
	SetUserRoles(ctx context.Context, in *SetUserRolesRequest, opts ...grpc.CallOption) (*User, error)
}

type auth2Client struct {
	cc grpc.ClientConnInterface
}

func NewAuth2Client(cc grpc.ClientConnInterface) Auth2Client {
	return &auth2Client{cc}
}

func (c *auth2Client) Stats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/Auth2/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) Restart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) SystemSupportNotify(ctx context.Context, in *SystemSupportNotifyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/SystemSupportNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) GetUserSessions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error) {
	out := new(GetUserSessionsResponse)
	err := c.cc.Invoke(ctx, "/Auth2/GetUserSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) SaveUserSession(ctx context.Context, in *UserSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/SaveUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) DeleteUserSession(ctx context.Context, in *UserSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/DeleteUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/Auth2/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) DeleteUsers(ctx context.Context, in *UserIdsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) CreateUser(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) UpdateUser(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) CheckUserPassword(ctx context.Context, in *UserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/CheckUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) SetUserPassword(ctx context.Context, in *UserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Auth2/SetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) ConfirmUser(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/ConfirmUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) RequestUserPassword(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/RequestUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth2Client) SetUserRoles(ctx context.Context, in *SetUserRolesRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth2/SetUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Auth2Server is the server API for Auth2 service.
// All implementations must embed UnimplementedAuth2Server
// for forward compatibility
type Auth2Server interface {
	Stats(context.Context, *EmptyRequest) (*StatsResponse, error)
	Restart(context.Context, *EmptyRequest) (*EmptyResponse, error)
	SystemSupportNotify(context.Context, *SystemSupportNotifyRequest) (*EmptyResponse, error)
	GetUserSessions(context.Context, *UserRequest) (*GetUserSessionsResponse, error)
	SaveUserSession(context.Context, *UserSessionRequest) (*EmptyResponse, error)
	DeleteUserSession(context.Context, *UserSessionRequest) (*EmptyResponse, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*UsersResponse, error)
	GetUser(context.Context, *UserRequest) (*User, error)
	DeleteUser(context.Context, *UserRequest) (*EmptyResponse, error)
	DeleteUsers(context.Context, *UserIdsRequest) (*EmptyResponse, error)
	CreateUser(context.Context, *UserPayload) (*User, error)
	UpdateUser(context.Context, *UserPayload) (*User, error)
	CheckUserPassword(context.Context, *UserPasswordRequest) (*EmptyResponse, error)
	SetUserPassword(context.Context, *UserPasswordRequest) (*EmptyResponse, error)
	ConfirmUser(context.Context, *TokenRequest) (*User, error)
	RequestUserPassword(context.Context, *UserRequest) (*User, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*User, error)
	SetUserRoles(context.Context, *SetUserRolesRequest) (*User, error)
	mustEmbedUnimplementedAuth2Server()
}

// UnimplementedAuth2Server must be embedded to have forward compatible implementations.
type UnimplementedAuth2Server struct {
}

func (UnimplementedAuth2Server) Stats(context.Context, *EmptyRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedAuth2Server) Restart(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedAuth2Server) SystemSupportNotify(context.Context, *SystemSupportNotifyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSupportNotify not implemented")
}
func (UnimplementedAuth2Server) GetUserSessions(context.Context, *UserRequest) (*GetUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (UnimplementedAuth2Server) SaveUserSession(context.Context, *UserSessionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserSession not implemented")
}
func (UnimplementedAuth2Server) DeleteUserSession(context.Context, *UserSessionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedAuth2Server) SearchUsers(context.Context, *SearchUsersRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedAuth2Server) GetUser(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuth2Server) DeleteUser(context.Context, *UserRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuth2Server) DeleteUsers(context.Context, *UserIdsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedAuth2Server) CreateUser(context.Context, *UserPayload) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuth2Server) UpdateUser(context.Context, *UserPayload) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuth2Server) CheckUserPassword(context.Context, *UserPasswordRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPassword not implemented")
}
func (UnimplementedAuth2Server) SetUserPassword(context.Context, *UserPasswordRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPassword not implemented")
}
func (UnimplementedAuth2Server) ConfirmUser(context.Context, *TokenRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUser not implemented")
}
func (UnimplementedAuth2Server) RequestUserPassword(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUserPassword not implemented")
}
func (UnimplementedAuth2Server) ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedAuth2Server) SetUserRoles(context.Context, *SetUserRolesRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserRoles not implemented")
}
func (UnimplementedAuth2Server) mustEmbedUnimplementedAuth2Server() {}

// UnsafeAuth2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Auth2Server will
// result in compilation errors.
type UnsafeAuth2Server interface {
	mustEmbedUnimplementedAuth2Server()
}

func RegisterAuth2Server(s grpc.ServiceRegistrar, srv Auth2Server) {
	s.RegisterService(&Auth2_ServiceDesc, srv)
}

func _Auth2_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).Stats(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).Restart(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_SystemSupportNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSupportNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).SystemSupportNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/SystemSupportNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).SystemSupportNotify(ctx, req.(*SystemSupportNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/GetUserSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).GetUserSessions(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_SaveUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).SaveUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/SaveUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).SaveUserSession(ctx, req.(*UserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_DeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).DeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/DeleteUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).DeleteUserSession(ctx, req.(*UserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).DeleteUsers(ctx, req.(*UserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).CreateUser(ctx, req.(*UserPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).UpdateUser(ctx, req.(*UserPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_CheckUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).CheckUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/CheckUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).CheckUserPassword(ctx, req.(*UserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_SetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).SetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/SetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).SetUserPassword(ctx, req.(*UserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_ConfirmUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).ConfirmUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/ConfirmUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).ConfirmUser(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_RequestUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).RequestUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/RequestUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).RequestUserPassword(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).ChangeUserPassword(ctx, req.(*ChangeUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth2_SetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2Server).SetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth2/SetUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2Server).SetUserRoles(ctx, req.(*SetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth2_ServiceDesc is the grpc.ServiceDesc for Auth2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auth2",
	HandlerType: (*Auth2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Auth2_Stats_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Auth2_Restart_Handler,
		},
		{
			MethodName: "SystemSupportNotify",
			Handler:    _Auth2_SystemSupportNotify_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _Auth2_GetUserSessions_Handler,
		},
		{
			MethodName: "SaveUserSession",
			Handler:    _Auth2_SaveUserSession_Handler,
		},
		{
			MethodName: "DeleteUserSession",
			Handler:    _Auth2_DeleteUserSession_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _Auth2_SearchUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Auth2_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Auth2_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _Auth2_DeleteUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Auth2_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Auth2_UpdateUser_Handler,
		},
		{
			MethodName: "CheckUserPassword",
			Handler:    _Auth2_CheckUserPassword_Handler,
		},
		{
			MethodName: "SetUserPassword",
			Handler:    _Auth2_SetUserPassword_Handler,
		},
		{
			MethodName: "ConfirmUser",
			Handler:    _Auth2_ConfirmUser_Handler,
		},
		{
			MethodName: "RequestUserPassword",
			Handler:    _Auth2_RequestUserPassword_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _Auth2_ChangeUserPassword_Handler,
		},
		{
			MethodName: "SetUserRoles",
			Handler:    _Auth2_SetUserRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth2.proto",
}
